# GitHub Actions workflow to deploy the TARV2 DynamoDB table
name: Deploy Centralised PRP DDB for TARV2

on:
  # Trigger on push to dev or TAR-* branches for dev environment
  push:
    branches:
      - dev
      - 'TAR-*'
  # Trigger on PR merge for nonprod, staging, and prod
  pull_request:
    types: [closed]
    branches:
      - nonprod
      - staging
      - prod
  # Allow manual trigger with environment input
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy (dev, nonprod, staging, prod)"
        required: true
        type: string
        default: dev
      python_version:
        description: "Python version for the runner"
        required: true
        type: string
        default: "3.11"

permissions:
  id-token: write   # Required for OIDC-based AWS authentication
  contents: write   # Required for checking out the repository

jobs:
  deploy:
    runs-on: default
    strategy:
      matrix:
        environment: [dev, nonprod, staging, prod]
        include:
          - environment: dev
            previous: null
          - environment: nonprod
            previous: dev
          - environment: staging
            previous: nonprod
          - environment: prod
            previous: staging
    if: |
      (github.event_name == 'push' && matrix.environment == 'dev' && (github.ref_name == 'dev' || startsWith(github.ref_name, 'TAR-'))) ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == matrix.environment && github.event.pull_request.head.ref == matrix.previous) ||
      (github.event_name == 'workflow_dispatch' && inputs.environment == matrix.environment)
    needs: ${{ matrix.previous != null ? 'deploy-' + matrix.previous : null }}
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version || '3.11' }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install awscli
        shell: bash

      - name: Configure AWS credentials (AssumeRoleWithWebIdentity)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.GHA_TRUST_ROLE }}
          role-session-name: githubsession
          aws-region: ${{ vars.AWS_REGION }}

      - name: Configure AWS credentials (AssumeRole)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.GHA_CICD_ROLE }}
          role-session-name: githubsession
          aws-region: ${{ vars.AWS_REGION }}
          role-chaining: true

      - name: Verify AWS Caller Identity
        run: aws sts get-caller-identity

      - name: Validate CloudFormation Template
        run: |
          echo "Validating template: ${{ vars.CFN_TEMPLATE_PATH }}"
          aws cloudformation validate-template \
            --template-body file://${{ vars.CFN_TEMPLATE_PATH }} \
            --region ${{ vars.AWS_REGION }}

      - name: Deploy CloudFormation Stack
        run: |
          echo "Deploying stack for environment: ${{ matrix.environment }}"
          set +e
          aws cloudformation deploy \
            --template-file ${{ vars.CFN_TEMPLATE_PATH }} \
            --stack-name ${{ vars.STACK_NAME }} \
            --parameter-overrides \
              Environment=${{ matrix.environment }} \
              TableName=${{ vars.TABLE_NAME }} \
              OrganizationId=${{ vars.ORGANIZATION_ID }} \
              LambdaRoleName=${{ vars.LAMBDA_ROLE_NAME }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --region ${{ vars.AWS_REGION }} \
            --no-fail-on-empty-changeset
          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ]; then
            echo "Deployment failed, checking stack status..."
            if aws cloudformation describe-stacks --stack-name ${{ vars.STACK_NAME }} --region ${{ vars.AWS_REGION }} > /dev/null 2>&1; then
              STACK_STATUS=$(aws cloudformation describe-stacks \
                --stack-name ${{ vars.STACK_NAME }} \
                --region ${{ vars.AWS_REGION }} \
                --query 'Stacks[0].StackStatus' \
                --output text)
              echo "Stack status: $STACK_STATUS"
              if [[ "$STACK_STATUS" == "ROLLBACK_COMPLETE" || "$STACK_STATUS" == "UPDATE_ROLLBACK_COMPLETE" ]]; then
                echo "Stack is in $STACK_STATUS state. Exiting with failure."
                exit 1
              elif [[ "$STACK_STATUS" == "CREATE_COMPLETE" || "$STACK_STATUS" == "UPDATE_COMPLETE" ]]; then
                echo "Stack is already up to date or created. Continuing..."
              else
                echo "Unexpected stack status: $STACK_STATUS. Exiting with failure."
                exit $EXIT_CODE
              fi
            else
              echo "Stack does not exist or another error occurred. Exiting with failure."
              exit $EXIT_CODE
            fi
          fi

      - name: Populate DynamoDB with Initial Data
        if: matrix.environment == 'dev' || matrix.environment == 'nonprod'
        run: |
          echo "Inserting initial data into table: ${{ vars.TABLE_NAME }}-${{ matrix.environment }}"
          aws dynamodb put-item \
            --table-name ${{ vars.TABLE_NAME }}-${{ matrix.environment }} \
            --item '{
                "services": {"S": "sample"},
                "version": {"N": "1"},
                "PolicyJSON": {
                  "S": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"test:sampledata\"],\"Resource\":\"*\",\"Effect\":\"Allow\"}]}"
                }
              }' \
            --region ${{ vars.AWS_REGION }}