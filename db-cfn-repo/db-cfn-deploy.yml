# GitHub Actions workflow to deploy the TARV2 DynamoDB table
name: Deploy Centralised PRP DDB for TARV2

on:
  push:
    branches:
      - dev
      - nonprod
      - staging
      - prod
      - 'TAR-*'
  pull_request:
    branches:
      - dev
      - nonprod
      - staging
      - prod
      - 'TAR-*'
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy (dev, nonprod, staging, prod)"
        required: true
        type: string
        default: dev
      python_version:
        description: "Python version for the runner"
        required: true
        type: string
        default: "3.11"

permissions:
  id-token: write   # Required for OIDC-based AWS authentication
  contents: write   # Required for checking out the repository

jobs:
  build-test-deploy:
    # Use a standard Ubuntu runner for consistency
    runs-on: ubuntu-latest
    # Dynamically set the GitHub environment based on input or branch
    environment: ${{ inputs.environment || github.ref_name }}

    env:
      # AWS region for deployment (e.g., ap-southeast-2)
      AWS_REGION: ${{ vars.AWS_REGION }}
      # CloudFormation stack name
      STACK_NAME: ${{ vars.STACK_NAME }}
      # Base table name (appended with environment, e.g., OrgReferencePolicies-dev)
      TABLE_NAME: ${{ vars.TABLE_NAME }}
      # AWS Organization ID for access control
      ORGANIZATION_ID: ${{ vars.ORGANIZATION_ID }}
      # Bypass proxy for AWS API calls in the specified region (optional, for proxy environments)
      NO_PROXY: ${{ vars.AWS_REGION }}.amazonaws.com
      # Enable debug logging for GitHub Actions runner
      ACTIONS_RUNNER_DEBUG: true
      # Enable debug logging for individual steps
      ACTIONS_STEP_DEBUG: true

    # Define matrix for environment-specific deployments
    strategy:
      matrix:
        environment:
          - dev
          - nonprod
          - staging
          - prod
        include:
          - environment: dev
            account: dev
          - environment: nonprod
            account: nonprod
          - environment: staging
            account: staging
          - environment: prod
            account: prod
      fail-fast: false

    steps:
      # Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Python environment for AWS CLI
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version || '3.11' }}

      # Install AWS CLI and dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install awscli
        shell: bash

      # Validate that the branch matches the intended environment
      - name: Validate Branch to Environment Mapping
        run: |
          if [[ "${{ github.ref_name }}" == "dev" || "${{ github.ref_name }}" =~ ^TAR- ]] && [[ "${{ matrix.environment }}" != "dev" ]]; then
            echo "Error: dev and TAR-* branches can only deploy to dev environment"
            exit 1
          fi
          if [[ "${{ github.ref_name }}" == "nonprod" ]] && [[ "${{ matrix.environment }}" != "nonprod" ]]; then
            echo "Error: nonprod branch can only deploy to nonprod environment"
            exit 1
          fi
          if [[ "${{ github.ref_name }}" == "staging" ]] && [[ "${{ matrix.environment }}" != "staging" ]]; then
            echo "Error: staging branch can only deploy to staging environment"
            exit 1
          fi
          if [[ "${{ github.ref_name }}" == "prod" ]] && [[ "${{ matrix.environment }}" != "prod" ]]; then
            echo "Error: prod branch can only deploy to prod environment"
            exit 1
          fi

      # Configure AWS credentials using OIDC
      - name: Configure AWS credentials (AssumeRoleWithWebIdentity)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.GHA_TRUST_ROLE }}
          role-session-name: githubsession
          aws-region: ${{ vars.AWS_REGION }}

      # Assume the CI/CD role for deployment
      - name: Configure AWS credentials (AssumeRole)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.GHA_CICD_ROLE }}
          role-session-name: githubsession
          aws-region: ${{ vars.AWS_REGION }}
          role-chaining: true

      # Verify AWS identity for debugging
      - name: Verify AWS Caller Identity
        run: aws sts get-caller-identity

      # Validate the CloudFormation template
      - name: Validate CloudFormation Template
        run: |
          echo "Validating template: dynamodb-cfn-template.yml"
          aws cloudformation validate-template \
            --template-body file://cloudformation/dynamodb-cfn-template.yml \
            --region ${{ vars.AWS_REGION }}

      # Deploy the CloudFormation stack
      - name: Deploy CloudFormation Stack
        run: |
          echo "Deploying stack for environment: ${{ matrix.environment }}"
          set +e
          aws cloudformation deploy \
            --template-file cloudformation/dynamodb-cfn-template.yml \
            --stack-name ${{ vars.STACK_NAME }} \
            --parameter-overrides \
              Environment=${{ matrix.environment }} \
              TableName=${{ vars.TABLE_NAME }} \
              OrganizationId=${{ vars.ORGANIZATION_ID }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --region ${{ vars.AWS_REGION }} \
            --no-fail-on-empty-changeset
          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ]; then
            echo "Deployment failed, checking stack status..."
            if aws cloudformation describe-stacks --stack-name ${{ vars.STACK_NAME }} --region ${{ vars.AWS_REGION }} > /dev/null 2>&1; then
              STACK_STATUS=$(aws cloudformation describe-stacks \
                --stack-name ${{ vars.STACK_NAME }} \
                --region ${{ vars.AWS_REGION }} \
                --query 'Stacks[0].StackStatus' \
                --output text)
              echo "Stack status: $STACK_STATUS"
              if [[ "$STACK_STATUS" == "ROLLBACK_COMPLETE" || "$STACK_STATUS" == "UPDATE_ROLLBACK_COMPLETE" ]]; then
                echo "Stack is in $STACK_STATUS state. Exiting with failure."
                exit 1
              elif [[ "$STACK_STATUS" == "CREATE_COMPLETE" || "$STACK_STATUS" == "UPDATE_COMPLETE" ]]; then
                echo "Stack is already up to date or created. Continuing..."
              else
                echo "Unexpected stack status: $STACK_STATUS. Exiting with failure."
                exit $EXIT_CODE
              fi
            else
              echo "Stack does not exist or another error occurred. Exiting with failure."
              exit $EXIT_CODE
            fi
          fi

      # Populate the DynamoDB table with initial data (only for dev and nonprod)
      - name: Populate DynamoDB with Initial Data
        if: matrix.environment == 'dev' || matrix.environment == 'nonprod'
        run: |
          echo "Inserting initial data into table: ${{ vars.TABLE_NAME }}-${{ matrix.environment }}"
          aws dynamodb put-item \
            --table-name ${{ vars.TABLE_NAME }}-${{ matrix.environment }} \
            --item '{
                "services": {"S": "sample"},
                "version": {"S": "v1"},
                "approved_policy_actions": {
                  "S": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"test:sampledata\"],\"Resource\":\"*\",\"Effect\":\"Allow\"}]}"
                }
              }' \
            --region ${{ vars.AWS_REGION }}