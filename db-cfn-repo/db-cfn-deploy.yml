name: Deploy Centralised PRP DDB for TARV2

on:
  push:
    branches:
      - dev
      - staging
      - nonprod
      - main
  pull_request:
    branches:
      - dev
      - staging
      - nonprod
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        type: choice
        options:
          - dev
          - staging
          - nonprod
          - prod
        default: dev
      python_version:
        description: Python version
        required: true
        type: string
        default: "3.11"

permissions:
  id-token: write
  contents: write

jobs:
  deploy:
    runs-on: default
    environment: ${{ matrix.env }}
    strategy:
      matrix:
        env:
          - dev
          - staging
          - nonprod
          - prod
        include:
          - env: dev
            branch: dev
          - env: staging
            branch: staging
          - env: nonprod
            branch: nonprod
          - env: prod
            branch: main
      fail-fast: false

    # Skip deployment if branch doesn't match environment (except for workflow_dispatch)
    if: github.event_name == 'workflow_dispatch' || github.ref_name == matrix.branch

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version || '3.11' }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -i https://artifactory.internal.cba/api/pypi/org.python.pypi/simple/ --upgrade awscli
        shell: bash

      - name: Configure AWS credentials (AssumeRoleWithWebIdentity)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GHA_TRUST_ROLE }}
          role-session-name: githubsession-${{ matrix.env }}
          aws-region: ${{ vars.AWS_REGION }}
          aws-account-id: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Configure AWS credentials (AssumeRole)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GHA_CICD_ROLE }}
          role-session-name: githubsession-${{ matrix.env }}
          aws-region: ${{ vars.AWS_REGION }}
          role-chaining: true

      - name: Validate CloudFormation Template
        run: |
          echo "Validating template: prp-ddb.yml for ${{ matrix.env }}"
          aws cloudformation validate-template \
            --template-body file://cloudformation/prp-ddb.yml \
            --region ${{ vars.AWS_REGION }}
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}

      - name: Deploy CloudFormation Stack
        run: |
          echo "Deploying stack for environment: ${{ matrix.env }}"
          set +e
          for attempt in {1..3}; do
            aws cloudformation deploy \
              --template-file cloudformation/prp-ddb.yml \
              --stack-name ${{ vars.STACK_NAME }}-${{ matrix.env }} \
              --parameter-overrides OrganizationId=${{ vars.ORGANIZATION_ID }} Environment=${{ matrix.env }} \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
              --region ${{ vars.AWS_REGION }} \
              --no-fail-on-empty-changeset
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 0 ]; then
              echo "Deployment succeeded for ${{ matrix.env }}"
              break
            fi
            echo "Deployment attempt $attempt failed for ${{ matrix.env }}"
            if [ $attempt -lt 3 ]; then
              echo "Retrying in 10 seconds..."
              sleep 10
            fi
          done
          if [ $EXIT_CODE -ne 0 ]; then
            echo "Deployment failed after 3 attempts, checking stack status..."
            if aws cloudformation describe-stacks --stack-name ${{ vars.STACK_NAME }}-${{ matrix.env }} --region ${{ vars.AWS_REGION }} > /dev/null 2>&1; then
              STACK_STATUS=$(aws cloudformation describe-stacks \
                --stack-name ${{ vars.STACK_NAME }}-${{ matrix.env }} \
                --region ${{ vars.AWS_REGION }} \
                --query 'Stacks[0].StackStatus' \
                --output text)
              echo "Stack status: $STACK_STATUS"
              if [[ "$STACK_STATUS" == "ROLLBACK_COMPLETE" || "$STACK_STATUS" == "UPDATE_ROLLBACK_COMPLETE" ]]; then
                echo "Stack is in $STACK_STATUS state. Exiting with failure."
                exit 1
              elif [[ "$STACK_STATUS" == "CREATE_COMPLETE" || "$STACK_STATUS" == "UPDATE_COMPLETE" ]]; then
                echo "Stack is already up to date or created. Continuing..."
              else
                echo "Unexpected stack status: $STACK_STATUS. Exiting with failure."
                exit $EXIT_CODE
              fi
            else
              echo "Stack does not exist or another error occurred. Exiting with failure."
              exit $EXIT_CODE
            fi
          fi
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}

      - name: Populate DynamoDB with Initial Data
        run: |
          echo "Inserting initial data into table: ${{ vars.TABLE_NAME }} for ${{ matrix.env }}"
          aws dynamodb put-item \
            --table-name ${{ vars.TABLE_NAME }} \
            --item '{
                "services": {"S": "sample"},
                "version": {"N": "1"},
                "PolicyJSON": {
                  "S": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"test:sampledata\"],\"Resource\":\"${{ vars.ARN_PREFIX }}\",\"Effect\":\"Allow\"}]}"
                }
              }' \
            --region ${{ vars.AWS_REGION }}
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}