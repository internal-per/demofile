name: Update Policies
description: Deploys Lambda stack or syncs policies to S3 and updates DynamoDB
inputs:
  aws-region:
    description: AWS region for deployment
    required: true
  bucket-name:
    description: S3 bucket name for policy files
    required: true
  table-name:
    description: DynamoDB table name
    required: true
  lambda-function-name:
    description: Lambda function name
    required: true
  environment:
    description: Environment (dev, nonprod, main, prod)
    required: true
  gha-trust-role:
    description: IAM role for OIDC authentication
    required: true
  gha-cicd-role:
    description: IAM role for CI/CD operations
    required: true
  bucket-name-base:
    description: Base name for S3 bucket
    required: true
  table-name-base:
    description: Base name for DynamoDB table
    required: true
  stack-name-base:
    description: Base name for CloudFormation stack
    required: true
  template-file:
    description: CloudFormation template file
    required: true
  deploy-lambda:
    description: Whether to deploy Lambda stack (true) or policies (false)
    required: true
runs:
  using: composite
  steps:
    - name: Setup Environment
      uses: ./.github/actions/deploy
      with:
        gha-trust-role: ${{ inputs.gha-trust-role }}
        gha-cicd-role: ${{ inputs.gha-cicd-role }}
        aws-region: ${{ inputs.aws-region }}
    - name: Verify Policy Directory
      if: inputs.deploy-lambda == 'false'
      run: ls -la policies/ || echo "No policies/ directory"
      shell: bash
    - name: Check S3 Bucket
      id: check-bucket
      if: inputs.deploy-lambda == 'false'
      run: |
        if aws s3api head-bucket --bucket "${{ inputs.bucket-name }}" --region "${{ inputs.aws-region }}" 2>/dev/null; then
          echo "bucket_exists=true" >> $GITHUB_OUTPUT
          aws s3 rm s3://"${{ inputs.bucket-name }}"/policies/ --recursive --region "${{ inputs.aws-region }}" || true
        else
          echo "bucket_exists=false" >> $GITHUB_OUTPUT
        fi
      shell: bash
    - name: Validate Template
      if: inputs.deploy-lambda == 'true'
      run: |
        aws cloudformation validate-template \
          --template-body file://cloudformation/${{ inputs.template-file }} \
          --region ${{ inputs.aws-region }}
      shell: bash
    - name: Deploy Stack
      if: inputs.deploy-lambda == 'true'
      run: |
        aws cloudformation deploy \
          --template-file cloudformation/${{ inputs.template-file }} \
          --stack-name ${{ inputs.stack-name-base }}-${{ inputs.environment }} \
          --parameter-overrides \
            TableName=${{ inputs.table-name }} \
            BucketName=${{ inputs.bucket-name }} \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --region ${{ inputs.aws-region }} \
          --no-fail-on-empty-changeset || \
        { STATUS=$(aws cloudformation describe-stacks --stack-name ${{ inputs.stack-name-base }}-${{ inputs.environment }} --region ${{ inputs.aws-region }} --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "NOT_FOUND"); \
          case "$STATUS" in \
            ROLLBACK_COMPLETE|UPDATE_ROLLBACK_COMPLETE) exit 1;; \
            CREATE_COMPLETE|UPDATE_COMPLETE) echo "Stack up to date";; \
            *) exit 1;; \
          esac; }
      shell: bash
    - name: Sync Policies to S3
      if: inputs.deploy-lambda == 'false'
      run: |
        aws s3 sync policies/ s3://"${{ inputs.bucket-name }}"/policies/ --region "${{ inputs.aws-region }}"
        aws s3 ls s3://"${{ inputs.bucket-name }}"/policies/ --region "${{ inputs.aws-region }}" || echo "No files in S3"
      shell: bash
    - name: Invoke Lambda
      if: inputs.deploy-lambda == 'false'
      run: |
        aws lambda invoke \
          --function-name "${{ inputs.lambda-function-name }}" \
          --payload "{\"table_name\": \"${{ inputs.table-name }}\", \"bucket_name\": \"${{ inputs.bucket-name }}\"}" \
          --region "${{ inputs.aws-region }}" response.json && cat response.json
      shell: bash
