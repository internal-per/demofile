AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys a Lambda function to update prp-db-org-policy DynamoDB table with policies from aws-guardrail-policy-security repo.

Parameters:
  TableName:
    Type: String
    Default: prp-db-org-policy
    Description: Name of the DynamoDB table to store policies.
  BucketName:
    Type: String
    Default: grd-pol
    Description: Name of the S3 bucket to store policy files (must be 3-63 characters).

Resources:
  PolicyUpdateLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GuardrailPolicyUpdate
      Handler: index.handler
      Runtime: python3.11
      Timeout: 300
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          from botocore.exceptions import ClientError

          # Initialize AWS clients
          dynamodb = boto3.resource('dynamodb')
          s3 = boto3.client('s3')

          def check_dynamodb_table_exists(table_name):
              """
              Check if the specified DynamoDB table exists in the account.
              
              Args:
                  table_name (str): Name of the DynamoDB table.
                  
              Raises:
                  ValueError: If the table does not exist.
              """
              try:
                  dynamodb.meta.client.describe_table(TableName=table_name)
              except ClientError as e:
                  if e.response['Error']['Code'] == 'ResourceNotFoundException':
                      raise ValueError(f"DynamoDB table '{table_name}' does not exist in the account.")
                  raise

          def extract_service_from_actions(policy_data):
              """
              Extract the service name from IAM policy actions (e.g., 's3:CreateBucket' -> 's3').
              
              Args:
                  policy_data (dict): Policy JSON with 'Statement' containing 'Action'.
                  
              Returns:
                  str: Service name (e.g., 's3').
                  
              Raises:
                  ValueError: If no valid service name is found.
              """
              statements = policy_data.get('Statement', [])
              if not statements:
                  raise ValueError("Policy has no 'Statement' field.")
              
              for statement in statements:
                  actions = statement.get('Action', [])
                  # Handle single action (str) or multiple actions (list)
                  if isinstance(actions, str):
                      actions = [actions]
                  elif not isinstance(actions, list):
                      continue
                  
                  for action in actions:
                      if ':' in action and action != '*':
                          service = action.split(':')[0].lower()
                          if service:
                              return service
              
              raise ValueError("No valid service name found in policy actions.")

          def handler(event, context):
              """
              Lambda handler to update prp-db-org-policy DynamoDB table with policies from S3.
              
              Args:
                  event: Dict with 'table_name' (DynamoDB table) and 'bucket_name' (S3 bucket).
                  context: Lambda context object.
              
              Returns:
                  Dict with 'statusCode' (200/500) and 'body' (success/error message).
              """
              try:
                  # Get table and bucket names from event, with defaults
                  table_name = event.get('table_name', 'prp-db-org-policy')
                  bucket_name = event.get('bucket_name', 'grd-pol')

                  # Check if DynamoDB table exists
                  check_dynamodb_table_exists(table_name)
                  table = dynamodb.Table(table_name)

                  # List policy files in S3 bucket under policies/ prefix
                  response = s3.list_objects_v2(Bucket=bucket_name, Prefix='policies/')
                  if 'Contents' not in response:
                      return {
                          'statusCode': 200,
                          'body': f'No policy files found in s3://{bucket_name}/policies/.'
                      }

                  # Process each policy file
                  for obj in response['Contents']:
                      key = obj['Key']
                      if not key.endswith('.json'):
                          continue  # Skip non-JSON files

                      # Read policy file from S3
                      policy_obj = s3.get_object(Bucket=bucket_name, Key=key)
                      policy_data = json.loads(policy_obj['Body'].read().decode('utf-8'))
                      
                      # Extract service name from actions
                      service_name = extract_service_from_actions(policy_data)

                      # Query DynamoDB for the latest version of this service
                      response = table.query(
                          KeyConditionExpression='services = :s',
                          ExpressionAttributeValues={':s': service_name},
                          ScanIndexForward=False,  # Sort descending to get latest version
                          Limit=1
                      )
                      
                      # Determine new version
                      latest_version = 'v0'
                      if response.get('Items'):
                          latest_version = response['Items'][0]['version']
                          # Increment version (e.g., v1 -> v2)
                          version_num = int(latest_version.replace('v', '')) + 1
                          new_version = f'v{version_num}'
                      else:
                          new_version = 'v1'

                      # Insert new item into DynamoDB
                      table.put_item(
                          Item={
                              'services': service_name,
                              'version': new_version,
                              'approved_policy_actions': {
                                  'Version': policy_data['Version'],
                                  'Statement': policy_data['Statement']
                              }
                          }
                      )

                  return {
                      'statusCode': 200,
                      'body': f'Policies updated successfully in DynamoDB table {table_name}.'
                  }
              
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'body': f'Error updating policies: {str(e)}'
                  }
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          BUCKET_NAME: !Ref BucketName

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: GuardrailPolicyUpdateRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:PutItem
                  - dynamodb:DescribeTable
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${BucketName}
                  - !Sub arn:aws:s3:::${BucketName}/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GuardrailPolicyUpdate:*

  PolicyBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      VersioningConfiguration:
        Status: Enabled

Outputs:
  LambdaArn:
    Description: ARN of the policy update Lambda function
    Value: !GetAtt PolicyUpdateLambda.Arn
  BucketName:
    Description: Name of the S3 bucket for policy files
    Value: !Ref BucketName