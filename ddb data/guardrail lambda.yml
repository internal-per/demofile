AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys a Lambda function and S3 bucket to update prp-db-org-policy DynamoDB table with policies from aws-guardrail-policy-security repo.

Parameters:
  TableName:
    Type: String
    Default: prp-db-org-policy
    Description: Name of the DynamoDB table to store policies.
  BucketName:
    Type: String
    Default: grd-pol-123456789012  # Replace with your AWS account ID
    Description: Name of the S3 bucket to store policy files (must be 3-63 characters).

Resources:
  PolicyUpdateLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GuardrailPolicyUpdate
      Handler: index.handler
      Runtime: python3.11
      Timeout: 300
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          from botocore.exceptions import ClientError
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          dynamodb = boto3.resource('dynamodb')
          s3 = boto3.client('s3')

          def check_dynamodb_table_exists(table_name):
              logger.info(f"Checking if DynamoDB table '{table_name}' exists")
              try:
                  dynamodb.meta.client.describe_table(TableName=table_name)
                  logger.info(f"Table '{table_name}' found")
              except ClientError as e:
                  logger.error(f"Error checking table: {str(e)}")
                  if e.response['Error']['Code'] == 'ResourceNotFoundException':
                      raise ValueError(f"DynamoDB table '{table_name}' does not exist in the account.")
                  raise

          def extract_service_from_actions(policy_data):
              logger.info("Extracting service from policy actions")
              statements = policy_data.get('Statement', [])
              if not statements:
                  logger.error("Policy has no 'Statement' field")
                  raise ValueError("Policy has no 'Statement' field.")
              for statement in statements:
                  actions = statement.get('Action', [])
                  if isinstance(actions, str):
                      actions = [actions]
                  elif not isinstance(actions, list):
                      continue
                  for action in actions:
                      if ':' in action and action != '*':
                          service = action.split(':')[0].lower()
                          if service:
                              logger.info(f"Extracted service: {service}")
                              return service
              logger.error("No valid service name found in policy actions")
              raise ValueError("No valid service name found in policy actions.")

          def handler(event, context):
              logger.info(f"Received event: {json.dumps(event)}")
              try:
                  table_name = event.get('table_name', 'prp-db-org-policy')
                  bucket_name = event.get('bucket_name', 'grd-pol-123456789012')
                  logger.info(f"Processing table: {table_name}, bucket: {bucket_name}")
                  check_dynamodb_table_exists(table_name)
                  table = dynamodb.Table(table_name)
                  logger.info(f"Listing objects in s3://{bucket_name}/policies/")
                  response = s3.list_objects_v2(Bucket=bucket_name, Prefix='policies/')
                  if 'Contents' not in response:
                      logger.info(f"No policy files found in s3://{bucket_name}/policies/")
                      return {
                          'statusCode': 200,
                          'body': f'No policy files found in s3://{bucket_name}/policies/.'
                      }
                  for obj in response['Contents']:
                      key = obj['Key']
                      logger.info(f"Processing object: {key}")
                      if not key.endswith('.json'):
                          logger.info(f"Skipping non-JSON file: {key}")
                          continue
                      logger.info(f"Reading S3 object: {key}")
                      policy_obj = s3.get_object(Bucket=bucket_name, Key=key)
                      policy_data = json.loads(policy_obj['Body'].read().decode('utf-8'))
                      logger.info(f"Policy data: {json.dumps(policy_data)}")
                      service_name = extract_service_from_actions(policy_data)
                      logger.info(f"Updating DynamoDB for service: {service_name}")
                      try:
                          # Get current item to determine version
                          response = table.get_item(Key={'services': service_name})
                          current_version = response.get('Item', {}).get('version', 'v0')
                          version_num = int(current_version.replace('v', '')) + 1 if current_version.startswith('v') else 1
                          new_version = f'v{version_num}'
                          # Update item with new version and policy
                          table.update_item(
                              Key={'services': service_name},
                              UpdateExpression='SET version = :v, approved_policy_actions = :p',
                              ExpressionAttributeValues={
                                  ':v': new_version,
                                  ':p': {
                                      'Version': policy_data['Version'],
                                      'Statement': policy_data['Statement']
                                  }
                              }
                          )
                          logger.info(f"Successfully updated {service_name} to version {new_version}")
                      except ClientError as e:
                          logger.error(f"Error updating DynamoDB for {service_name}: {str(e)}")
                          raise
                  logger.info("Policy update completed")
                  return {
                      'statusCode': 200,
                      'body': f'Policies updated successfully in DynamoDB table {table_name}.'
                  }
              except Exception as e:
                  logger.error(f"Error updating policies: {str(e)}")
                  raise
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          BUCKET_NAME: !Ref BucketName

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: GuardrailPolicyUpdateRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DescribeTable
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${BucketName}
                  - !Sub arn:aws:s3:::${BucketName}/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GuardrailPolicyUpdate:*

  PolicyBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref BucketName
      VersioningConfiguration:
        Status: Enabled

Outputs:
  LambdaArn:
    Description: ARN of the policy update Lambda function
    Value: !GetAtt PolicyUpdateLambda.Arn
  BucketName:
    Description: Name of the S3 bucket for policy files
    Value: !Ref BucketName