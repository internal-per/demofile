name: Update Policies in DynamoDB

on:
  pull_request:
    types: [closed]
    branches:
      - dev
      - main

env:
  AWS_REGION: ap-southeast-2
  BUCKET_NAME: grd-pol-123456789012  # Replace with your AWS account ID

permissions:
  id-token: write
  contents: write
  actions: write  # Required to trigger deploy-lambda.yml

jobs:
  update-policies:
    runs-on: default
    if: github.event.pull_request.merged == true
    environment: dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -i https://artifactory.internal.cba/api/pypi/org.python.pypi/simple/ --upgrade awscli
        shell: bash

      - name: Configure AWS credentials (AssumeRoleWithWebIdentity)
        uses: aws-actions/configure-aws-credentials@v2.2.0
        with:
          role-to-assume: ${{ secrets.GHA_TRUST_ROLE_ARN }}
          role-session-name: "GitHubActions"
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure AWS credentials (AssumeRole)
        uses: aws-actions/configure-aws-credentials@v2.2.0
        with:
          role-to-assume: ${{ secrets.GHA_CICD_ROLE_ARN }}
          role-session-name: "GitHubActions"
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true

      - name: Check if S3 Bucket Exists
        id: check-bucket
        run: |
          if aws s3api head-bucket --bucket ${{ env.BUCKET_NAME }} --region ${{ env.AWS_REGION }} 2>/dev/null; then
            echo "Bucket ${{ env.BUCKET_NAME }} exists."
            echo "bucket_exists=true" >> $GITHUB_OUTPUT
            # Clean up existing objects in policies/ to avoid conflicts
            echo "Cleaning up existing objects in s3://${{ env.BUCKET_NAME }}/policies/..."
            aws s3 rm s3://${{ env.BUCKET_NAME }}/policies/ --recursive --region ${{ env.AWS_REGION }} || true
          else
            echo "Bucket ${{ env.BUCKET_NAME }} does not exist."
            echo "bucket_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Trigger Deploy Lambda Workflow if Bucket Missing
        if: steps.check-bucket.outputs.bucket_exists == 'false'
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/deploy-lambda.yml/dispatches \
            -d '{"ref":"main","inputs":{"environment":"dev","python_version":"3.11"}}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for Bucket Creation
        if: steps.check-bucket.outputs.bucket_exists == 'false'
        run: |
          echo "Waiting for bucket ${{ env.BUCKET_NAME }} to be created..."
          for i in {1..30}; do
            if aws s3api head-bucket --bucket ${{ env.BUCKET_NAME }} --region ${{ env.AWS_REGION }} 2>/dev/null; then
              echo "Bucket ${{ env.BUCKET_NAME }} created."
              exit 0
            fi
            echo "Bucket not yet available, waiting 10 seconds..."
            sleep 10
          done
          echo "Error: Bucket ${{ env.BUCKET_NAME }} was not created in time."
          exit 1
        env:
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Sync policies to S3
        run: |
          aws s3 sync policies/ s3://${{ env.BUCKET_NAME }}/policies/ --region ${{ env.AWS_REGION }}
        env:
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Invoke Lambda to update DynamoDB
        run: |
          aws lambda invoke \
            --function-name GuardrailPolicyUpdate \
            --payload '{"table_name": "prp-db-org-policy", "bucket_name": "${{ env.BUCKET_NAME }}"}' \
            --region ${{ env.AWS_REGION }} \
            response.json
          cat response.json
        env:
          AWS_REGION: ${{ env.AWS_REGION }}