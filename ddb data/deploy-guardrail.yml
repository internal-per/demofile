name: Deploy Guardrail
on:
  push:
    branches:
      - dev
      - 'ttrs-*'
  pull_request:
    types: [closed]
    branches:
      - nonprod
      - main
      - prod
  workflow_dispatch:
    inputs:
      environment:
        description: Environment (dev, nonprod, main, prod)
        required: true
        type: string
      aws_region:
        description: AWS region
        required: true
        type: string
      bucket_name_base:
        description: Base name for S3 bucket
        required: true
        type: string
      table_name_base:
        description: Base name for DynamoDB table
        required: true
        type: string
      lambda_function_name_base:
        description: Base name for Lambda function
        required: true
        type: string
      stack_name_base:
        description: Base name for CloudFormation stack
        required: true
        type: string
      template_file:
        description: CloudFormation template file
        required: true
        type: string
      gha_trust_role:
        description: IAM role for OIDC authentication
        required: true
        type: string
      gha_cicd_role:
        description: IAM role for CI/CD operations
        required: true
        type: string
      deploy_lambda:
        description: Deploy Lambda stack (true) or policies (false)
        required: true
        type: string
permissions:
  id-token: write
  contents: write
  actions: write
jobs:
  Deploy:
    runs-on: default
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Validate Variables
        run: |
          if [ -z "${{ vars.STACK_NAME_BASE }}" ]; then
            echo "Error: vars.STACK_NAME_BASE is not set"
            exit 1
          fi
          if [ -z "${{ vars.TEMPLATE_FILE }}" ]; then
            echo "Error: vars.TEMPLATE_FILE is not set"
            exit 1
          fi
          echo "STACK_NAME_BASE: ${{ vars.STACK_NAME_BASE }}"
          echo "TEMPLATE_FILE: ${{ vars.TEMPLATE_FILE }}"
      - name: Validate Environment
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ inputs.environment }}" != "dev" ] && [ "${{ inputs.environment }}" != "nonprod" ] && [ "${{ inputs.environment }}" != "main" ] && [ "${{ inputs.environment }}" != "prod" ]; then
              echo "Invalid environment: ${{ inputs.environment }}"
              exit 1
            fi
            echo "Running for ${{ inputs.environment }} (workflow_dispatch)"
            exit 0
          fi
          if [ "${{ github.event_name }}" = "push" ] && { [ "${{ github.ref_name }}" = "dev" ] || [[ "${{ github.ref_name }}" =~ ^ttrs-.* ]]; } && [ "${{ inputs.environment }}" = "dev" ]; then
            echo "Running for dev (push)"
          elif [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.pull_request.merged }}" = "true" ]; then
            if [ "${{ github.event.pull_request.base.ref }}" = "nonprod" ] && [ "${{ github.event.pull_request.head.ref }}" = "dev" ] && [ "${{ inputs.environment }}" = "nonprod" ]; then
              echo "Running for nonprod (PR merge)"
            elif [ "${{ github.event.pull_request.base.ref }}" = "main" ] && [ "${{ github.event.pull_request.head.ref }}" = "nonprod" ] && [ "${{ inputs.environment }}" = "main" ]; then
              echo "Running for main (PR merge)"
            elif [ "${{ github.event.pull_request.base.ref }}" = "prod" ] && [ "${{ github.event.pull_request.head.ref }}" = "main" ] && [ "${{ inputs.environment }}" = "prod" ]; then
              echo "Running for prod (PR merge)"
            else
              echo "Skipping: Invalid PR merge for ${{ inputs.environment }}"
              exit 0
            fi
          else
            echo "Skipping: No matching event for ${{ inputs.environment }}"
            exit 0
          fi
      - name: Update Policies or Deploy Lambda
        uses: ./.github/actions/update-policies
        with:
          aws-region: ${{ vars.AWS_REGION }}
          bucket-name: ${{ vars.BUCKET_NAME_BASE }}-${{ github.event.inputs.environment }}
          table-name: ${{ vars.TABLE_NAME_BASE }}-${{ github.event.inputs.environment }}
          lambda-function-name: ${{ vars.LAMBDA_FUNCTION_NAME_BASE }}-${{ github.event.inputs.environment }}
          environment: ${{ github.event.inputs.environment }}
          gha-trust-role: ${{ vars.GHA_TRUST_ROLE }}
          gha-cicd-role: ${{ vars.GHA_CICD_ROLE }}
          bucket-name-base: ${{ vars.BUCKET_NAME_BASE }}
          table-name-base: ${{ vars.TABLE_NAME_BASE }}
          stack-name-base: ${{ vars.STACK_NAME_BASE }}
          template-file: ${{ vars.TEMPLATE_FILE }}
          deploy-lambda: ${{ github.event.inputs.deploy_lambda }}
      - name: Trigger Next Environment
        if: github.event_name != 'workflow_dispatch' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment != 'prod')
        run: |
          NEXT_ENV=""
          NEXT_REF=""
          if [ "${{ github.event.inputs.environment }}" = "dev" ]; then
            NEXT_ENV="nonprod"
            NEXT_REF="nonprod"
          elif [ "${{ github.event.inputs.environment }}" = "nonprod" ]; then
            NEXT_ENV="main"
            NEXT_REF="main"
          elif [ "${{ github.event.inputs.environment }}" = "main" ]; then
            NEXT_ENV="prod"
            NEXT_REF="prod"
          fi
          if [ -n "$NEXT_ENV" ]; then
            curl -X POST -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ github.token }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${{ github.repository }}/actions/workflows/deploy-guardrail.yml/dispatches" \
              -d "{\"ref\":\"$NEXT_REF\",\"inputs\":{\"environment\":\"$NEXT_ENV\",\"aws_region\":\"${{ vars.AWS_REGION }}\",\"bucket_name_base\":\"${{ vars.BUCKET_NAME_BASE }}\",\"stack_name_base\":\"${{ vars.STACK_NAME_BASE }}\",\"table_name_base\":\"${{ vars.TABLE_NAME_BASE }}\",\"lambda_function_name_base\":\"${{ vars.LAMBDA_FUNCTION_NAME_BASE }}\",\"template_file\":\"${{ vars.TEMPLATE_FILE }}\",\"gha_trust_role\":\"${{ vars.GHA_TRUST_ROLE }}\",\"gha_cicd_role\":\"${{ vars.GHA_CICD_ROLE }}\",\"deploy_lambda\":\"${{ github.event.inputs.deploy_lambda }}\"}}"
          fi
        shell: bash