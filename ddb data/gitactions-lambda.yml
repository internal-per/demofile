name: Deploy Lambda
on:
  push:
    branches:
      - dev
      - 'ttrs-*'
  pull_request:
    types: [closed]
    branches:
      - nonprod
      - main
      - prod
  workflow_dispatch:
    inputs:
      environment:
        description: Environment (dev, nonprod, main, prod)
        required: true
        type: string
      python_version:
        description: Python version
        required: true
        type: string
      aws_region:
        description: AWS region
        required: true
        type: string
      bucket_name_base:
        description: Base name for S3 bucket
        required: true
        type: string
      stack_name_base:
        description: Base name for CloudFormation stack
        required: true
        type: string
      table_name_base:
        description: Base name for DynamoDB table
        required: true
        type: string
      template_file:
        description: CloudFormation template file
        required: true
        type: string
      gha_trust_role:
        description: IAM role for OIDC authentication
        required: true
        type: string
      gha_cicd_role:
        description: IAM role for CI/CD operations
        required: true
        type: string
permissions:
  id-token: write
  contents: write
jobs:
  DeployLambda:
    runs-on: default
    strategy:
      fail-fast: false
      matrix:
        environments: [dev, nonprod, main, prod]
      max-parallel: 1
    environment: ${{ matrix.environments }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Validate Environment
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.environment }}" != "${{ matrix.environments }}" ]]; then
            echo "Skipping environment ${{ matrix.environments }} for workflow_dispatch with input ${{ inputs.environment }}"
            exit 0
          fi
          if [[ "${{ matrix.environments }}" == "dev" && "${{ github.event_name }}" == "push" && ("${{ github.ref_name }}" == "dev" || "${{ github.ref_name }}" =~ ^ttrs-.*) ]]; then
            echo "Running for dev"
          elif [[ "${{ matrix.environments }}" == "nonprod" && "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" && "${{ github.event.pull_request.base.ref }}" == "nonprod" && "${{ github.event.pull_request.head.ref }}" == "dev" ]]; then
            echo "Running for nonprod"
          elif [[ "${{ matrix.environments }}" == "main" && "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" && "${{ github.event.pull_request.base.ref }}" == "main" && "${{ github.event.pull_request.head.ref }}" == "nonprod" ]]; then
            echo "Running for main"
          elif [[ "${{ matrix.environments }}" == "prod" && "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" && "${{ github.event.pull_request.base.ref }}" == "prod" && "${{ github.event.pull_request.head.ref }}" == "main" ]]; then
            echo "Running for prod"
          else
            echo "Skipping environment ${{ matrix.environments }}"
            exit 0
          fi
      - name: Setup Environment
        uses: ./.github/actions/deploy
        with:
          python-version: ${{ vars.PYTHON_VERSION }}
          gha-trust-role: ${{ vars.GHA_TRUST_ROLE }}
          gha-cicd-role: ${{ vars.GHA_CICD_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Validate Template
        run: |
          aws cloudformation validate-template \
            --template-body file://cloudformation/${{ vars.TEMPLATE_FILE }} \
            --region ${{ vars.AWS_REGION }}
      - name: Deploy Stack
        run: |
          aws cloudformation deploy \
            --template-file cloudformation/${{ vars.TEMPLATE_FILE }} \
            --stack-name ${{ vars.STACK_NAME_BASE }}-${{ matrix.environments }} \
            --parameter-overrides \
              TableName=${{ vars.TABLE_NAME_BASE }}-${{ matrix.environments }} \
              BucketName=${{ vars.BUCKET_NAME_BASE }}-${{ matrix.environments }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --region ${{ vars.AWS_REGION }} \
            --no-fail-on-empty-changeset || \
          { STATUS=$(aws cloudformation describe-stacks --stack-name ${{ vars.STACK_NAME_BASE }}-${{ matrix.environments }} --region ${{ vars.AWS_REGION }} --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "NOT_FOUND"); \
            case "$STATUS" in \
              ROLLBACK_COMPLETE|UPDATE_ROLLBACK_COMPLETE) exit 1;; \
              CREATE_COMPLETE|UPDATE_COMPLETE) echo "Stack up to date";; \
              *) exit 1;; \
            esac; }
