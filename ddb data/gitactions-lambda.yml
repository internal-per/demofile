# Workflow to deploy the Guardrail Lambda CloudFormation stack
name: Deploy Guardrail Lambda

# Define workflow triggers
on:
  # Trigger on push to main branch
  push:
    branches:
      - dev
  # Allow manual triggering with configurable inputs
  workflow_dispatch:
    inputs:
      # Environment for deployment (e.g., dev, prod)
      environment:
        description: "Environment to deploy"
        required: true
        type: string
        default: dev
      # Python version for AWS CLI
      python_version:
        description: Python version
        required: true
        type: string
        default: "3.11"
      # AWS region for resource deployment
      aws_region:
        description: AWS region for deployment
        required: true
        type: string
        default: ap-southeast-2
      # S3 bucket name for storing policy files
      bucket_name:
        description: S3 bucket name for policy files
        required: true
        type: string
        default: guardrail-policy-deploy-temp
      # CloudFormation stack name
      stack_name:
        description: CloudFormation stack name
        required: true
        type: string
        default: guardrail-lambda-stack
      # DynamoDB table name for policy storage
      table_name:
        description: DynamoDB table name
        required: true
        type: string
        default: prp-db-org-policy
      # CloudFormation template file name
      template_file:
        description: CloudFormation template file name
        required: true
        type: string
        default: guardrail-lambda.yml

# Define environment variables for the workflow
env:
  # AWS region, defaults to input or ap-southeast-2
  AWS_REGION: ${{ inputs.aws_region || 'ap-southeast-2' }}
  # S3 bucket name
  BUCKET_NAME: ${{ inputs.bucket_name || 'guardrail-policy-deploy-temp' }}
  # CloudFormation stack name, defaults to input or guardrail-lambda-stack
  STACK_NAME: ${{ inputs.stack_name || 'guardrail-lambda-stack' }}
  # DynamoDB table name, defaults to input or prp-db-org-policy
  TABLE_NAME: ${{ inputs.table_name || 'prp-db-org-policy' }}
  # Template file name, defaults to input or guardrail-lambda.yml
  TEMPLATE_FILE: ${{ inputs.template_file || 'guardrail-lambda.yml' }}

# Define permissions for GitHub Actions
permissions:
  id-token: write # Allow writing to OIDC token for AWS authentication
  contents: write # Allow writing to repository contents

# Define jobs for the workflow
jobs:
  # Job to deploy the Lambda stack
  deploy-lambda:
    runs-on: default # Use default runner
    environment: ${{ inputs.environment || github.ref_name }} # Set environment from input or branch

    steps:
      # Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Python environment for AWS CLI
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version || '3.11' }}

      # Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -i https://artifactory.internal.cba/api/pypi/org.python.pypi/simple/ --upgrade awscli
        shell: bash

      # Configure AWS credentials using OIDC
      - name: Configure AWS credentials (AssumeRoleWithWebIdentity)
        uses: aws-actions/configure-aws-credentials@v2.2.0
        with:
          role-to-assume: ${{ secrets.GHA_TRUST_ROLE_ARN }} # Trusted role for GitHub Actions
          role-session-name: "GitHubActions"
          aws-region: ${{ env.AWS_REGION }}

      # Chain additional AWS role for CI/CD permissions
      - name: Configure AWS credentials (AssumeRole)
        uses: aws-actions/configure-aws-credentials@v2.2.0
        with:
          role-to-assume: ${{ secrets.GHA_CICD_ROLE_ARN }} # CI/CD role for deployment
          role-session-name: "GitHubActions"
          aws-region: ${{ env.AWS_REGION }}
          role-chaining: true

      # Validate the CloudFormation template
      - name: Validate CloudFormation Template
        run: |
          echo "Validating template: ${{ env.TEMPLATE_FILE }}"
          aws cloudformation validate-template \
            --template-body file://cloudformation/${{ env.TEMPLATE_FILE }} \
            --region ${{ env.AWS_REGION }}
        env:
          AWS_REGION: ${{ env.AWS_REGION }}

      # Deploy the CloudFormation stack
      - name: Deploy CloudFormation Stack
        run: |
          echo "Deploying stack for template: ${{ env.TEMPLATE_FILE }}"
          set +e # Disable exit on error for custom error handling
          aws cloudformation deploy \
            --template-file cloudformation/${{ env.TEMPLATE_FILE }} \
            --stack-name ${{ env.STACK_NAME }} \
            --parameter-overrides \
              TableName=${{ env.TABLE_NAME }} \
              BucketName=${{ env.BUCKET_NAME }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --region ${{ env.AWS_REGION }} \
            --no-fail-on-empty-changeset
          EXIT_CODE=$? # Capture exit code
          if [ $EXIT_CODE -ne 0 ]; then
            echo "Deployment failed, checking stack status..."
            if aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
              STACK_STATUS=$(aws cloudformation describe-stacks \
                --stack-name ${{ env.STACK_NAME }} \
                --region ${{ env.AWS_REGION }} \
                --query 'Stacks[0].StackStatus' \
                --output text)
              echo "Stack status: $STACK_STATUS"
              if [[ "$STACK_STATUS" == "ROLLBACK_COMPLETE" || "$STACK_STATUS" == "UPDATE_ROLLBACK_COMPLETE" ]]; then
                echo "Stack is in $STACK_STATUS state. Exiting with failure."
                exit 1
              elif [[ "$STACK_STATUS" == "CREATE_COMPLETE" || "$STACK_STATUS" == "UPDATE_COMPLETE" ]]; then
                echo "Stack is already up to date or created. Continuing..."
              else
                echo "Unexpected stack status: $STACK_STATUS. Exiting with failure."
                exit $EXIT_CODE
              fi
            else
              echo "Stack does not exist or another error occurred. Exiting with failure."
              exit $EXIT_CODE
            fi
          fi
        env:
          AWS_REGION: ${{ env.AWS_REGION }}a
