AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: PRP Infra DDB for PACMAN deployment

# ============= Template Parameters =================
# Configuration values passed during deployment
Parameters:
  Environment:
    Type: String
    Description: Deployment environment (preview, nonp, prod)
    Default: preview
    AllowedValues:
      - preview
      - nonp
      - prod
  OrganizationId:
    Type: String
    Description: AWS Organization ID to restrict cross-account read access to org principals
  OrgIdDev:
    Type: String
    Description: Development Organization ID to grant access to the DynamoDB table (preview environment only)
    Default: "o-w4mbxaieqf"

# ============= Template Conditions ============
# Conditional logic for environment-specific configurations
Conditions:
  IsPreviewEnvironment: !Equals [!Ref Environment, "preview"]

Resources:
  # ============= IAM Role =============
  # Lambda execution role with DynamoDB permissions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "tenant-custom-org-guardrails-processor-role-${Environment}"
      PermissionsBoundary: !Sub "arn:aws:iam::${AWS::AccountId}:policy/cns-boundary-tenant-permission-boundary"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Deny
            Principal:
              AWS: "*"
            Action: sts:AssumeRole
            Condition:
              Bool:
                aws:PrincipalIsAWSService: "false"
              StringNotEquals:
                aws:PrincipalOrgID: !Ref OrganizationId
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "tenant-custom-org-guardrails-lambda-policy-${Environment}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:GetFunctionConfiguration
                Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:tenant-custom-org-guardrails-processor-${Environment}"
                Condition:
                  StringEquals:
                    aws:RequestedRegion: !Ref AWS::Region
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:DescribeTable
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/org-guardrails-${Environment}"
                Condition:
                  StringEquals:
                    aws:RequestedRegion: !Ref AWS::Region
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::prp-org-guardrails-policies-${Environment}-${AWS::AccountId}"
                Condition:
                  StringEquals:
                    aws:RequestedRegion: !Ref AWS::Region
                    aws:ResourceAccount: !Ref AWS::AccountId
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::prp-org-guardrails-policies-${Environment}-${AWS::AccountId}/policies/*"
                Condition:
                  StringEquals:
                    aws:RequestedRegion: !Ref AWS::Region
                    aws:ResourceAccount: !Ref AWS::AccountId
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tenant-custom-org-guardrails-processor-${Environment}:*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tenant-custom-org-guardrails-processor-${Environment}"
                Condition:
                  StringEquals:
                    aws:RequestedRegion: !Ref AWS::Region
  
  # ============= DynamoDB Table =============
  # Organization guardrail DDB Table
  PolicyTable:
    Type: AWS::DynamoDB::Table
    DependsOn: LambdaExecutionRole
    Properties:
      TableName: !Sub "org-guardrails-${Environment}"
      AttributeDefinitions:
        - AttributeName: ServicePrefix
          AttributeType: S
        - AttributeName: Version
          AttributeType: N
      KeySchema:
        - AttributeName: ServicePrefix
          KeyType: HASH
        - AttributeName: Version
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      ResourcePolicy:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            # Lambda role access
            - Effect: Allow
              Principal:
                AWS: !GetAtt LambdaExecutionRole.Arn
              Action:
                - dynamodb:GetItem 
                - dynamodb:UpdateItem 
                - dynamodb:DescribeTable 
                - dynamodb:PutItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/org-guardrails-${Environment}"
            # Multi-organization access
            - Effect: Allow
              Principal:
                AWS: '*'
              Action:
                - dynamodb:GetItem 
                - dynamodb:BatchGetItem
              Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/org-guardrails-${Environment}"
              Condition:
                StringEquals:
                  aws:PrincipalOrgID: !If
                    - IsPreviewEnvironment
                    - - !Ref OrganizationId
                      - !Ref OrgIdDev
                    - - !Ref OrganizationId

  # ============= Lambda Function =============
  # Organization guardrails processor triggered by S3 events
  PolicyProcessorFunction:
    Type: AWS::Serverless::Function
    DependsOn: 
      - PolicyTable
      - LambdaExecutionRole
    Properties:
      FunctionName: !Sub "tenant-custom-org-guardrails-processor-${Environment}"
      CodeUri: ../../src/functions/org_gr_ddb/
      Handler: index.handler
      Runtime: python3.11
      Timeout: 900 
      MemorySize: 512 
      Role: !GetAtt LambdaExecutionRole.Arn
      Tags:
        Environment: !Ref Environment
        Service: "org-guardrails"
        ManagedBy: "SAM"
        LastUpdated: !Ref AWS::StackLastUpdated
      Environment:
        Variables:
          TABLE_NAME: !Sub "org-guardrails-${Environment}"
          AWS_REGION: !Ref AWS::Region
    Metadata:

  # ============= S3 Bucket =============
  # Policy file storage with versioning and EventBridge notifications
  PolicyBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "prp-org-guardrails-policies-${Environment}-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  # EventBridge rule to handle S3 events
  S3EventRule:
    Type: AWS::Events::Rule
    DependsOn:
      - PolicyBucket
      - PolicyProcessorFunction
    Properties:
      Name: !Sub "tenant-custom-org-guardrails-s3events-${Environment}"
      Description: "Rule to capture S3 events for organization guardrails policies"
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "Object Created"
        detail:
          bucket:
            name:
              - !Ref PolicyBucket
          object:
            key:
              - prefix: !Sub "policies/"
      State: ENABLED
      Targets:
        - Id: "ProcessorLambdaTarget"
          Arn: !GetAtt PolicyProcessorFunction.Arn
  
  # Permission for EventBridge to invoke Lambda
  EventBridgeLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - PolicyProcessorFunction
      - S3EventRule
    Properties:
      FunctionName: !Ref PolicyProcessorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt S3EventRule.Arn

Outputs:
  TableArn:
    Description: ARN of the DynamoDB table
    Value: !GetAtt PolicyTable.Arn
  FunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt PolicyProcessorFunction.Arn
  BucketName:
    Description: Name of the S3 bucket
    Value: !Ref PolicyBucket
  RoleArn:
    Description: ARN of the IAM role
    Value: !GetAtt LambdaExecutionRole.Arn
  RoleName:
    Description: Name of the IAM role
    Value: !Ref LambdaExecutionRole
