AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: PRP Infra DDB for PACMAN Tenant Guardrails deployment

# ============= Template Parameters ==============
# Configuration values passed during deployment
Parameters:
  Environment:
    Type: String
    Description: Environment name (e.g., development, staging, production)
  EnvSuffix:
    Type: String
    Description: Short environment suffix (e.g., dev, stg, prod)
  PolicyType:
    Type: String
    Description: Type of policy being managed (tenant/org)
  ServiceType:
    Type: String
    Description: Service type (always 'guardrails' for this template)
  OrganizationId:
    Type: String
    Description: AWS Organization ID for access control
  LambdaRoleName:
    Type: String
    Description: Name of the Lambda execution role
  TableName:
    Type: String
    Description: Name of the DynamoDB table to store policies
  BucketNamePrefix:
    Type: String
    Default: "prp"
    Description: Prefix for bucket names (will be combined with env suffix)
  SSMParameterPrefix:
    Type: String
    Default: "/prp"
    Description: Prefix for SSM parameter paths
  FunctionNamePrefix:
    Type: String
    Default: "prp"
    Description: Prefix for Lambda function names (will be combined with env suffix)
  RuleNamePrefix:
    Type: String
    Default: "prp"
    Description: Prefix for EventBridge rule names (will be combined with env suffix)

Resources:
  # ============= IAM Role =============
  # Lambda execution role with DynamoDB and SSM permissions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref LambdaRoleName
      PermissionsBoundary: !Sub "arn:aws:iam::${AWS::AccountId}:policy/cns-boundary-tenant-permission-boundary"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "tenant-custom-${PolicyType}-${ServiceType}-lambda-policy-${EnvSuffix}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}"
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:PutParameter
                Resource: 
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SSMParameterPrefix}/${PolicyType}-${ServiceType}/*"
              - Effect: Allow
                Action:
                  - events:PutRule
                  - events:DeleteRule
                  - events:PutTargets
                  - events:RemoveTargets
                  - events:DescribeRule
                Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/${RuleNamePrefix}-${PolicyType}-${ServiceType}-*"
  
  # ============= DynamoDB Table =============
  # Tenant guardrails storage with ServicePrefix composite key
  PolicyTable:
    Type: AWS::DynamoDB::Table
    DependsOn: LambdaExecutionRole
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: ServicePrefix
          AttributeType: S
        - AttributeName: Version
          AttributeType: N
      KeySchema:
        - AttributeName: ServicePrefix
          KeyType: HASH
        - AttributeName: Version
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      ResourcePolicy:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            # Lambda role access
            - Effect: Allow
              Principal:
                AWS: !GetAtt LambdaExecutionRole.Arn
              Action:
                - dynamodb:GetItem 
                - dynamodb:UpdateItem 
                - dynamodb:DescribeTable 
                - dynamodb:PutItem
                - dynamodb:Query
              Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}"
            - Effect: Allow
              Principal:
                AWS: '*'
              Action:
                - dynamodb:GetItem 
                - dynamodb:BatchGetItem
              Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}"
              Condition:
                StringEquals:
                  aws:PrincipalOrgID: !Ref OrganizationId

  # ============= Lambda Function =============
  # Tenant guardrails processor triggered by S3 events
  PolicyProcessorFunction:
    Type: AWS::Serverless::Function
    DependsOn: 
      - PolicyTable
      - LambdaExecutionRole
    Properties:
      FunctionName: !Sub "${FunctionNamePrefix}-${PolicyType}-${ServiceType}-processor-${EnvSuffix}"
      CodeUri: ../../src/functions/tenant-gr-ddb
      Handler: index.handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName

  # ============= S3 Bucket =============
  # Policy file storage with versioning and EventBridge notifications
  PolicyBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${BucketNamePrefix}-${PolicyType}-${ServiceType}-policies-${EnvSuffix}-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
            
  PolicyTableParameter:
    Type: AWS::SSM::Parameter
    DependsOn: PolicyTable
    Properties:
      Name: !Sub "${SSMParameterPrefix}/${PolicyType}-${ServiceType}/table-arn-${EnvSuffix}"
      Type: String
      Value: !GetAtt PolicyTable.Arn
      Description: !Sub "ARN of the ${PolicyType} ${ServiceType} policy table for ${EnvSuffix} environment"
  
  # Create managed policy for org access
  TableAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn: PolicyTable
    Properties:
      ManagedPolicyName: !Sub "tenant-custom-${PolicyType}-${ServiceType}-table-access-${EnvSuffix}"
      Description: !Sub "Policy for accessing the ${PolicyType} ${ServiceType} policy table for ${EnvSuffix} environment"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:BatchGetItem
            Resource: !GetAtt PolicyTable.Arn
      
  # EventBridge rules to handle S3 event
  S3EventRule:
    Type: AWS::Events::Rule
    DependsOn:
      - PolicyBucket
      - PolicyProcessorFunction
    Properties:
      Name: !Sub "${RuleNamePrefix}-${PolicyType}-${ServiceType}-s3events-${EnvSuffix}"
      Description: !Sub "Rule to capture S3 events for ${PolicyType} ${ServiceType} policies"
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "Object Created"
        detail:
          bucket:
            name:
              - !Ref PolicyBucket
          object:
            key:
              - prefix: !Sub "policies/${PolicyType}/"
      State: ENABLED
      Targets:
        - Id: "ProcessorLambdaTarget"
          Arn: !GetAtt PolicyProcessorFunction.Arn
  
  # Permission for EventBridge to invoke Lambda
  EventBridgeLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - PolicyProcessorFunction
      - S3EventRule
    Properties:
      FunctionName: !Ref PolicyProcessorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt S3EventRule.Arn

Outputs:
  TableArn:
    Description: ARN of the DynamoDB table
    Value: !GetAtt PolicyTable.Arn
  FunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt PolicyProcessorFunction.Arn
  BucketName:
    Description: Name of the S3 bucket
    Value: !Ref PolicyBucket
  TableAccessPolicyArn:
    Description: ARN of the IAM policy for table access
    Value: !Ref TableAccessPolicy