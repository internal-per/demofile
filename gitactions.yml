name: Deploy Tenant Automation TARV2 Anand

# Updated: Trigger on all branches
on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
  workflow_dispatch:
    inputs:
      environment:
        description: "environment to deploy"
        required: true
        type: string
        default: canary
      python_version:
        description: python version
        required: true
        type: string
        default: 3.11

permissions:
  id-token: write # Allow OIDC token for AWS credentials
  contents: read # Read repository contents

jobs:
  build-test-deploy:
    #runs-on: ubuntu-latest
    runs-on: default
    environment: ${{ inputs.environment || github.ref_name }}

    steps:
      # Updated: Use latest checkout action
      - name: Checkout repository
        uses: actions/checkout@v4

      # Updated: Use latest Python setup action
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version || '3.11' }}

      # Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -i https://artifactory.internal.cba/api/pypi/org.python.pypi/simple/ --upgrade pip pipenv
          pip install -i https://artifactory.internal.cba/api/pypi/org.python.pypi/simple/ --upgrade awscli aws-sam-cli
          pip install -r requirements.txt

      # Remove comments after the code is formatted and tests pass
      # - name: Run pre-build checks
      #   run: |
      #     pipenv run black --check . --include '\.py$'
      #     pipenv run flake8 .

      # Run unit tests with coverage
      # - name: Run tests
      #   run: pipenv run pytest
      # # Upload coverage report to Codecov
      # - name: Upload coverage report
      #   uses: codecov/codecov-action@v3
      #   with:
      #     files: ./coverage.xml
      #     fail_ci_if_error: true

      # Configure AWS credentials via OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.gha_trust_role }}
          aws-region: ap-southeast-2
          role-session-name: GitHubActionsfortarv2

      # Create Lambda Layer
      - name: Create Lambda Layer
        run: |
          mkdir -p python
          pip install -r requirements.txt -t python
          cp src/tarV2/utils.py python/
          zip -r tarv2-lambda-layer.zip python
          LAYER_VERSION=$(aws lambda publish-layer-version \
            --layer-name tarv2_lambda_layer \
            --zip-file fileb://tarv2-lambda-layer.zip \
            --compatible-runtimes python3.11 \
            --query 'Version' \
            --output text)
          LAYER_ARN=$(aws lambda get-layer-version \
            --layer-name tarv2_lambda_layer \
            --version-number $LAYER_VERSION \
            --query 'LayerVersionArn' \
            --output text)
          echo "LAYER_VERSION=$LAYER_VERSION" >> $GITHUB_ENV
          echo "LAYER_ARN=$LAYER_ARN" >> $GITHUB_ENV
          echo "The Lambda Layer version is: $LAYER_VERSION"
          echo "The Lambda Layer ARN is: $LAYER_ARN"
        env:
          AWS_REGION: ap-southeast-2

      - name: Compress the Lambda function code and upload to s3 bucket
        run: |
          cd src
          zip -r tarv2_lambda_code.zip .
          echo "The Lambda function code is compressed into tarv2_lambda_code.zip"
          aws s3 cp tarv2_lambda_code.zip s3://tetris-lambda-code-bucket-517767640990/tarv2_lambda_code.zip
          echo "The Lambda function code is uploaded to S3 bucket"

      
      # Deploy TarV2 resources
      - name: Deploy TarV2 resources
        run: |
          set +e
          aws cloudformation deploy \
            --template-file Cloudformation/template.yaml \
            --stack-name tarv2-resources-anand \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --region ap-southeast-2
          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ]; then
            echo "Checking if the stack is already up to date..."
            if aws cloudformation describe-stacks --stack-name tarv2-resources-anand --region ap-southeast-2 | grep -q "ROLLBACK_COMPLETE"; then
              echo "Stack is in ROLLBACK_COMPLETE state. Exiting with failure."
              exit 1
            elif aws cloudformation describe-stacks --stack-name tarv2-resources-anand --region ap-southeast-2 | grep -q "UPDATE_COMPLETE"; then
              echo "Stack is already up to date. Continuing..."
            elif aws cloudformation describe-stacks --stack-name tarv2-resources-anand --region ap-southeast-2 | grep -q "UPDATE_ROLLBACK_COMPLETE"; then
              echo "Stack is in UPDATE_ROLLBACK_COMPLETE state. Exiting with failure."
              exit 1
            elif aws cloudformation describe-stacks --stack-name tarv2-resources-anand --region ap-southeast-2 | grep -q "CREATE_COMPLETE"; then
              echo "Stack is already created. Continuing..."
            else
              echo "Unexpected error occurred. Exiting with failure."
              exit $EXIT_CODE
            fi
          fi
