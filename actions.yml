name: Deploy TARV2 Lambda Stacks

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        type: string
        default: dev
      python_version:
        description: Python version
        required: true
        type: string
        default: 3.11

permissions:
  id-token: write # Allow OIDC token for AWS credentials
  contents: read # Read repository contents

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || github.ref_name }}

    strategy:
      matrix:
        template:
          - template.yaml
          # Add more CFN templates with Lambda code, e.g.:
          # - lambda-functions.yaml
          # - api-gateway-lambda.yaml
        account:
          - dev
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version || '3.11' }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -i https://artifactory.internal.cba/api/pypi/org.python.pypi/simple/ --upgrade pip pipenv
          pip install -i https://artifactory.internal.cba/api/pypi/org.python.pypi/simple/ --upgrade awscli aws-sam-cli
          pip install -r requirements.txt
        shell: bash

      - name: Create Lambda Layer
        if: matrix.template == 'template.yaml' # Run only once
        run: |
          echo "Creating Lambda layer..."
          mkdir -p python
          pip install -r requirements.txt -t python
          zip -r tarv2-lambda-layer.zip python
          LAYER_VERSION=$(aws lambda publish-layer-version \
            --layer-name tarv2_lambda_layer \
            --zip-file fileb://tarv2-lambda-layer.zip \
            --compatible-runtimes python3.11 \
            --query 'Version' \
            --output text)
          LAYER_ARN=$(aws lambda get-layer-version \
            --layer-name tarv2_lambda_layer \
            --version-number $LAYER_VERSION \
            --query 'LayerVersionArn' \
            --output text)
          echo "LAYER_VERSION=$LAYER_VERSION" >> $GITHUB_ENV
          echo "LAYER_ARN=$LAYER_ARN" >> $GITHUB_ENV
          echo "Lambda Layer version: $LAYER_VERSION"
          echo "Lambda Layer ARN: $LAYER_ARN"
        env:
          AWS_REGION: ap-southeast-2

      - name: Compress and upload Lambda code to S3
        if: matrix.template == 'template.yaml' # Run only once
        run: |
          echo "Compressing and uploading Lambda code..."
          cd src
          zip -r tarv2_prp_db_code.zip .
          echo "Lambda code compressed into tarv2_prp_db_code.zip"
          aws s3 cp tarv2_prp_db_code.zip s3://tetris-lambda-code-bucket-517767640990/tarv2_prp_db_code.zip
          echo "Lambda code uploaded to S3 bucket"
        env:
          AWS_REGION: ap-southeast-2

      - name: Validate CloudFormation Template
        run: |
          echo "Validating CFN template: ${{ matrix.template }}"
          aws cloudformation validate-template \
            --template-body file://Cloudformation/${{ matrix.template }}
        env:
          AWS_REGION: ap-southeast-2

      - name: Deploy CloudFormation Stack
        run: |
          echo "Deploying stack for template: ${{ matrix.template }}"
          set +e
          STACK_NAME="tarv2-lambda-${{ matrix.account }}-${{ matrix.template }}-stack"
          PARAMETER_FILE="Cloudformation/parameters/${{ matrix.template }}.json"
          # Deploy with parameters if parameter file exists
          DEPLOY_CMD="aws cloudformation deploy \
            --template-file Cloudformation/${{ matrix.template }} \
            --stack-name $STACK_NAME \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
            --region ap-southeast-2 \
            --no-fail-on-empty-changeset"
          if [[ -f "$PARAMETER_FILE" ]]; then
            DEPLOY_CMD="$DEPLOY_CMD --parameter-overrides file://$PARAMETER_FILE"
          fi
          # Retry deployment up to 3 times for transient errors
          for attempt in {1..3}; do
            echo "Deployment attempt $attempt..."
            $DEPLOY_CMD
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 0 ]; then
              echo "Deployment successful"
              break
            fi
            echo "Deployment failed, checking stack status..."
            if aws cloudformation describe-stacks --stack-name $STACK_NAME --region ap-southeast-2 > /dev/null 2>&1; then
              STACK_STATUS=$(aws cloudformation describe-stacks \
                --stack-name $STACK_NAME \
                --region ap-southeast-2 \
                --query 'Stacks[0].StackStatus' \
                --output text)
              echo "Stack status: $STACK_STATUS"
              if [[ "$STACK_STATUS" == "ROLLBACK_COMPLETE" || "$STACK_STATUS" == "UPDATE_ROLLBACK_COMPLETE" ]]; then
                echo "Stack is in $STACK_STATUS state. Exiting with failure."
                exit 1
              elif [[ "$STACK_STATUS" == "CREATE_COMPLETE" || "$STACK_STATUS" == "UPDATE_COMPLETE" ]]; then
                echo "Stack is already up to date or created. Continuing..."
                break
              else
                echo "Unexpected stack status: $STACK_STATUS. Retrying..."
                sleep 10
              fi
            else
              echo "Stack does not exist or another error occurred. Retrying..."
              sleep 10
            fi
            if [ $attempt -eq 3 ]; then
              echo "All deployment attempts failed. Exiting with failure."
              exit $EXIT_CODE
            fi
          done
        env:
          AWS_REGION: ap-southeast-2